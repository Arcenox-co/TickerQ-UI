import{_ as s,o as a,c as e,X as t}from"./chunks/framework.6e839c56.js";const D=JSON.parse('{"title":"Host API","description":"","frontmatter":{},"headers":[],"relativePath":"apis/host-api.md","filePath":"apis/host-api.md"}'),o={name:"apis/host-api.md"},n=t(`<h1 id="host-api" tabindex="-1">Host API <a class="header-anchor" href="#host-api" aria-label="Permalink to &quot;Host API&quot;">​</a></h1><h2 id="itickerhost-interface" tabindex="-1">ITickerHost Interface <a class="header-anchor" href="#itickerhost-interface" aria-label="Permalink to &quot;ITickerHost Interface&quot;">​</a></h2><p>Retrive the <code>ITickerHost</code> from DependencyInjection.</p><blockquote><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ITickerHost</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">_tickerHost</span><span style="color:#89DDFF;">;</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">Actions:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">_tickerHost</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">NextPlannedOccurrence </span><span style="color:#676E95;font-style:italic;">// get the next occurring job time. </span></span>
<span class="line"><span style="color:#A6ACCD;">_tickerHost</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Run</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// runs the TickerQ if stopped.</span></span>
<span class="line"><span style="color:#A6ACCD;">_tickerHost</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">RestartIfNeeded</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">newOccurrence</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> dateTime</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// restart TickerQ if input dateTime is less than NextPlannedOccurrence.</span></span>
<span class="line"><span style="color:#A6ACCD;">_tickerHost</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Restart</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// restart TickerQ</span></span>
<span class="line"><span style="color:#A6ACCD;">_tickerHost</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Stop</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// stops the TickerQ from running.</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>TickerQ <code>Run</code> Method is triggered when the application starts.</p></div></div></blockquote>`,4),l=[n];function p(c,r,i,y,d,A){return a(),e("div",null,l)}const C=s(o,[["render",p]]);export{D as __pageData,C as default};
